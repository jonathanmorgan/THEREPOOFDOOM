THEREPOOFDOOM!!!

This has been broken up into the network_builder and python_utilities projects:
- https://github.com/jonathanmorgan/network_builder
- https://github.com/jonathanmorgan/python_utilities

Ths REPO is still here in case someone was using it and is confused why a pull destroyed it, but it is now empty.  To use network_builder and utilities, pull in the code in the repos above instead.

That said, here is the old README:

Components:
- network builder
- dict_helper
- django_utils, including query filter class and queryset helper class.

=================================================================================
Installing Network Builder
=================================================================================

For now, just have classes/models that hold network information pre-query.

To install:
- before you do anything else, if you aren't familiar with django, it is good to just run through the django tutorial, to get an idea how it all works, what it takes to configure django to talk with a database (http://docs.djangoproject.com/en/dev/intro/tutorial01/).
- grab the django folder from this repo.
- install and configure the network django application (in the network folder, settings-anon.py has a barebones install except for your database information), or install the network_builder application in your existing site.
- Once you either make a fresh install and configure settings.py or install the application in an existing django install, run "python manage.py syncdb" to build database tables:

    python manage.py syncdb

- use manage.py to load the attribute types fixtures:

    python manage.py loaddata attribute_type.json

- use manage.py to load the attribute derivation types fixtures:

    python manage.py loaddata attribute_derivation_type.json
    
- if you want them, create node types and/or tie types.

- play (and hope it doesn't break!).  By play, I mean build programs that create nodes, associate attributes to them, and create ties of multiple types between them, then use that data for network analysis!  Eventually, planning on building an output framework so that networks in this database can be easily output to common file formats for social network analysis.  For now, though, you'll have to write your output yourself.

- to include the network builder classes in another program, you'll need to import the classes.  For example, to use nodes, node types, ties, and tie types, after making sure that the network_builder packages is in your python path, you'd include the following imports in your python source file:

    # THEREPOOFDOOM network classes, for building messaging networks for users.
    from network_builder.models import Node
    from network_builder.models import Node_Type
    from network_builder.models import Tie
    from network_builder.models import Tie_Type

    OR, you could just import the network_builder package if you want to maintain namespace separation (in case you have a Node class already, for example):
    
    import network_builder
    
    THEN reference:
    
    network_builder.models.Node()
    
    to create a Node instance, etc.
